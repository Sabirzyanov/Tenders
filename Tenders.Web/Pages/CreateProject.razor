
@inject ProjectResourceService ProjectResourceService
@inject UserResourceService UserResourceService
@inject AuthorizationService AuthorizationService
@page "/CreateProject"

@using Tenders.Web.Services
@using Tenders.Core.Entities
@using Tenders.Core.Entities.Project
@using Tenders.Web.Data

<h3>Create Project</h3>

@if (_allUserIsLoaded)
{
    <form name="project" class="needs-validation">
        <div class="form-group">
            <label for="projectInput">Project Name</label>
            <input type="text" @bind="_projectInfos.Name" class="form-control required" id="projectInput" placeholder="Enter Project Name">
        </div>
        <div class="form-group">
            <label for="projectDescriptionInput">Project Description</label>
            <input type="text" @bind="_projectInfos.Description" class="form-control required" id="projectDescriptionInput" placeholder="Enter Project Desc">
        </div>
        <div class="form-group">
            <label for="projectDescriptionInput">Project Builder</label>
            <select class="form-select" id="selectionArchitect" @bind="_projectInfos.BuilderId">
                <option selected>Choose...</option>
                @foreach (var user in _builders)
                {
                    <option value="@user?.Id">@user?.Login</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="selectionBuilder">Project Architect</label>
            <select class="form-select" id="selectionBuilder" @bind="_projectInfos.ArchitectId">
                <option selected>Choose...</option>
                @foreach (var user in _architects)
                {
                    <option value="@user?.Id">@user?.Login</option>
                }
            </select>
        </div>
        <button @onclick="@SaveProject" class="btn btn-outline-primary btn-block mb-4">Save</button>

    </form>
}


@code {
    public List<BaseUser?>? _builders;
    public List<BaseUser?>? _architects;
    private ProjectInfos _projectInfos = new();
    private bool _allUserIsLoaded;

    protected override async Task OnInitializedAsync()
    {
        _builders = (await UserResourceService.GetAllBuilders()).ToList();
        _architects = (await UserResourceService.GetAllArchitects()).ToList();
        _allUserIsLoaded = true;
    }

    private async Task SaveProject()
    {
        if (_projectInfos.BuilderId is null)
        {
            return;
        }

        if (_projectInfos.ArchitectId is null)
        {
            return;
        }
        await ProjectResourceService.Save(new Project(_projectInfos.Name, _projectInfos.Description, AuthorizationService.CurrentUser.Id,
            _projectInfos.ArchitectId, _projectInfos.BuilderId, (AuthorizationService.CurrentUser as Customer).IndustryType.Value));

    }
}